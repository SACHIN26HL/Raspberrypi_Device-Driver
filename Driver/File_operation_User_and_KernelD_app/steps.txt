Manually Creating Device File

We can create the device file manually by using mknod.

mknod -m <permissions> <name> <device type> <major> <minor>

<name> – your device file name that should have a full path (/dev/name)

<device type> – Put c or b

c – Character Device

b – Block Device

<major> – major number of your driver

<minor> – minor number of your driver

-m <permissions> – optional argument that sets the permission bits of the new device file to permissions

Example:
sudo mknod -m 666 /dev/etx_device c 246 0

If you don’t want to give permission, You can also use chmod to set the permissions for a device file after creation.
Advantages

    Anyone can create the device file using this method.
    
    
  .      Build the driver by using Makefile (sudo make)
   Load the driver using sudo insmod
    Check the device file using ls -l /dev/. By this time device file is not created for your driver.
    Create a device file using mknod and then check using ls -l /dev/.
    
        Now our device file got created and registered with a major number and minor number.
    Unload the driver using sudo rmmod
    
    
    
    Automatically Creating Device File

The automatic creation of device files can be handled with udev. Udev is the device manager for the Linux kernel that creates/removes device nodes in the /dev directory dynamically. Just follow the below steps.

    Include the header file linux/device.h and linux/kdev_t.h
    Create the struct Class
    Create Device with the class which is created by the above step

Create the class

This will create the struct class for our device driver. It will create a structure under/sys/class/.

struct class * class_create(struct module *owner, const char *name);

owner – pointer to the module that is to “own” this struct class

name – pointer to a string for the name of this class

This is used to create a struct class pointer that can then be used in calls to class_device_create.

Note, the pointer created here is to be destroyed when finished by making a call to class_destroy.
void class_destroy (struct class * cls);
Create Device

This function can be used by char device classes. A struct device will be created in sysfs, registered to the specified class.
struct device *device_create(struct *class, struct device *parent, dev_t dev, void * drvdata, const char *fmt, ...);

 

class – pointer to the struct class that this device should be registered to

parent – pointer to the parent struct device of this new device, if any

devt – the dev_t for the char device to be added

drvdata – the data to be added to the device for callbacks

fmt – string for the device’s name

... – variable arguments

A “dev” file will be created, showing the dev_t for the device, if the dev_t is not 0,0. If a pointer to a parent struct device is passed in, the newly created struct device will be a child of that device in sysfs. The pointer to the struct device will be returned from the call. Any further sysfs files that might be required can be created using this pointer.

Note, you can destroy the device using device_destroy().
void device_destroy (struct class * class, dev_t devt);
